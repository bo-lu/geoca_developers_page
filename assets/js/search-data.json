{
  
    
        "post0": {
            "title": "An easy guide in using the OGC API - Records endpoint",
            "content": "How to use the geo.ca OGC API endpoint . The OGC API standards . Geo.ca has implemented the developing OGC API family of standards. These new standards build upon the legacy of OGC Web standards (WMS, WFS, WCS, WPS, CSW, etc.), but uses modern web standards to access geospatial content. As the OGC API standards evolve and are finalized, geo.ca will leverage these new standards in building interoperable . For more information on the OGC API standards, please visit the OGC API Roadmap. . Geo.ca OGC API How-to . Geo.ca uses the OGC Certified Compliant implementation pygeoapi. At the time of this writing the version of pygeoapi is 0.10 .",
            "url": "https://bo-lu.github.io/geoca_developers_page/markdown/pygeoapi/ogc/api/2021/01/29/OGC-API.html",
            "relUrl": "/markdown/pygeoapi/ogc/api/2021/01/29/OGC-API.html",
            "date": " • Jan 29, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "An overview of Viewer technology used in the CGP",
            "content": "GeoView . Viewer technology used in the CGP . The Canadian Geospatial Platform intends to deploy new infrastructure, tools and web integration of GeoCore, a new geospatial metadata lake library capable of supporting multiple metadata standards. In recognition of these desired capabilities, it needs a lightweight viewer to incorporate in their infrastructure. The need is to have a simple and flexible viewer to display geospatial data from GeoCore metadata lake on a map with limited functionalities. . Demo . Solution . GeoView mapping capabilites are based on Leafet open source viewer. The overall project uses the latest React framework version 17+. With this in mind, here is the list of the main dependencies . react-leaflet version 3+ to make the link between Leafelt and React | i18next to do localization in English and French | material-ui to do the layout | . Developpement . Developement is made with Visual Studio Code and uses few extentions to help linting and formating . Prettier | ESLint | Better Comments | . Building the project . To install the project, just run npm install . To serve the project, just run npm run serve and GeoView will be serve from http://localhost:8080/ . Deploy to gh-pages . To deploy the project, just run npm run build . Then push the dist folder to your gh-pages npm run deploy . The project is now serve inside your GitHub gh-pages at `https://[GITHUB-USERNAME].github.io/GeoView/index.html . Make sure GitHub Pages are active inside your origin repository . Usage . We’ll go through the simplest way to use the Canadian Geospatial Platform Viewer. . First, grab the most recent release from the github releases. Place the files cgpv-main.js and cgpv-styles.css within your webpage’s folder structure. Place also the img and locales folder at the same place. We usually put. . Then you want to include those files on your page . Within head . &lt;link rel=&quot;stylesheet&quot; href=&quot;/cgpv-styles.css&quot; /&gt; . Near the end of the body . &lt;script src=&quot;/cgpv-main.js&quot;&gt;&lt;/script&gt; . Now that you have the required files on your page we should add the map element. There is 3 ways to do this . Map div element &lt;div id=&quot;mapLCC&quot; class=&quot;llwp-map&quot; data-leaflet=&quot;{ &#39;projection&#39;: 3978, &#39;zoom&#39;: 12, &#39;center&#39;: [45,-75], &#39;language&#39;: &#39;fr-CA&#39;, layers:[] }&quot;&gt;&lt;/div&gt; . | Work in progress -&gt; Url: The url will have parameters to setup the map. The map div, a div element with class llwp-map, must be on the page &lt;div id=&quot;mapLCC&quot; class=&quot;llwp-map&quot;&gt;&lt;/div&gt; . | Work in progress -&gt; Code: call the create map function from cgpv-main.js with needed parameters | . Parameters . projection: The basemap projection to use for the map. Accepted values are 3857 (Web Mercator) or 3978 (LCC) | zoom: The basemap zomm level. Accepted value is a number between 0 and 20 | center: The default center extent when the map loads. Accepted value is a pair of coordinates [lattitude, longitude] | language: The map language for labels and tooltips. Accepted values are en-CA and fr-CA | layers: Array of layers to add to the map url: The service url | type: The layer type. Accepted values are esriFeature, esriDynamic, ogcWMS | entries: For esriDynamic and ogcWMS a list of entries must be specified | . &#39;layers&#39;:[ { &#39;url&#39;: &#39;https://webservices.maps.canada.ca/arcgis/services/StatCan/census_subdivisions_2016_en/MapServer/WMSServer&#39;, &#39;type&#39;: &#39;ogcWMS&#39;, &#39;entries&#39;: &#39;0&#39; }, { &#39;url&#39;: &#39;https://geoappext.nrcan.gc.ca/arcgis/rest/services/NRCAN/Investing_Energy_Canada_en/MapServer&#39;, &#39;type&#39;: &#39;esriDynamic&#39;, &#39;entries&#39;: &#39;0, 2&#39; }, { &#39;url&#39;: &#39;https://geoappext.nrcan.gc.ca/arcgis/rest/services/GSCC/Geochronology/MapServer&#39;, &#39;type&#39;: &#39;esriDynamic&#39;, &#39;entries&#39;: &#39;0&#39; }, { &#39;url&#39;: &#39;https://geo.weather.gc.ca/geomet&#39;, &#39;type&#39;: &#39;ogcWMS&#39;, &#39;entries&#39;: &#39;RAQDPS-FW.CE_PM2.5-DIFF-YAvg&#39; } ] . | . Contributing to the project . see our wiki .",
            "url": "https://bo-lu.github.io/geoca_developers_page/markdown/viewer/leaflet/2021/01/29/GeoView.html",
            "relUrl": "/markdown/viewer/leaflet/2021/01/29/GeoView.html",
            "date": " • Jan 29, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "An easy guide in using the CSW endpoint",
            "content": "How to use the geo.ca CSW endpoint . The CSW and HNAP standard . Catalogue Service for the Web (CSW) is an Open Geospatial Consortium (OGC) standard used to publish and search for metadata, services and related information objects. On geo.ca, the metadata standard is structured according to the North American Profile of ISO 19115:2003 (NAP). . However, due to the flexible nature of the NAP standard, the Government of Canada has created a Harmonized North American Profile (HNAP) which takes the elements provided in the NAP but adjusts the cardinalities of the elements and specific business rules to control the values allowed in certain elements. For example, keywords used in metadata records must be recorded in the Government of Canada Core Subject Thesaurus. . Geo.ca CSW How-to . The geo.ca uses the OGC Certified Compliant CSW implementation pycsw. At the time of this writing the version of pycsw is 2.7.0 .",
            "url": "https://bo-lu.github.io/geoca_developers_page/markdown/csw/pycsw/ogc/hnap/2021/01/26/pycsw_howto.html",
            "relUrl": "/markdown/csw/pycsw/ogc/hnap/2021/01/26/pycsw_howto.html",
            "date": " • Jan 26, 2021"
        }
        
    
  
    
        ,"post3": {
            "title": "IGNORE - An Example Jupyter Notebook Post",
            "content": ". We are very pleased to announce the immediate availability of fastpages. fastpages is a platform which allows you to create and host a blog for free, with no ads and many useful features, such as: . Create posts containing code, outputs of code (which can be interactive), formatted text, etc directly from Jupyter Notebooks; for instance see this great example post from Scott Hawley. Notebook posts support features such as: Interactive visualizations made with Altair remain interactive. | Hide or show cell input and output. | Collapsable code cells that are either open or closed by default. | Define the Title, Summary and other metadata via a special markdown cells | Ability to add links to Colab and GitHub automatically. | . | Create posts, including formatting and images, directly from Microsoft Word documents. | Create and edit Markdown posts entirely online using GitHub&#39;s built-in markdown editor. | Embed Twitter cards and YouTube videos. | Categorization of blog posts by user-supplied tags for discoverability. | ... and much more | . fastpages relies on Github pages for hosting, and Github Actions to automate the creation of your blog. The setup takes around three minutes, and does not require any technical knowledge or expertise. Due to built-in automation of fastpages, you don&#39;t have to fuss with conversion scripts. All you have to do is save your Jupyter notebook, Word document or markdown file into a specified directory and the rest happens automatically. Infact, this blog post is written in a Jupyter notebook, which you can see with the &quot;View on GitHub&quot; link above. . fast.ai have previously released a similar project called fast_template, which is even easier to set up, but does not support automatic creation of posts from Microsoft Word or Jupyter notebooks, including many of the features outlined above. . Because fastpages is more flexible and extensible, we recommend using it where possible. fast_template may be a better option for getting folks blogging who have no technical expertise at all, and will only be creating posts using Github&#39;s integrated online editor. . Setting Up Fastpages . The setup process of fastpages is automated with GitHub Actions, too! Upon creating a repo from the fastpages template, a pull request will automatically be opened (after ~ 30 seconds) configuring your blog so it can start working. The automated pull request will greet you with instructions like this: . . All you have to do is follow these instructions (in the PR you receive) and your new blogging site will be up and running! . Jupyter Notebooks &amp; Fastpages . In this post, we will cover special features that fastpages provides for Jupyter notebooks. You can also write your blog posts with Word documents or markdown in fastpages, which contain many, but not all the same features. . Options via FrontMatter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # Title &gt; Awesome summary - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . All of the above settings are enabled in this post, so you can see what they look like! . the summary field (preceeded by &gt;) will be displayed under your title, and will also be used by social media to display as the description of your page. | toc: setting this to true will automatically generate a table of contents | badges: setting this to true will display Google Colab and GitHub links on your blog post. | comments: setting this to true will enable comments. See these instructions for more details. | author this will display the authors names. | categories will allow your post to be categorized on a &quot;Tags&quot; page, where readers can browse your post by categories. | . Markdown front matter is formatted similarly to notebooks. The differences between the two can be viewed on the fastpages README. . Code Folding . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . If you want to completely hide cells (not just collapse them), read these instructions. . Interactive Charts With Altair . Interactive visualizations made with Altair remain interactive! . We leave this below cell unhidden so you can enjoy a preview of syntax highlighting in fastpages, which uses the Dracula theme. . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;IMDB_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget IMDB_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | 6.1 | . 1 First Love, Last Rites | 10876.0 | 300000.0 | 6.9 | . 2 I Married a Strange Person | 203134.0 | 250000.0 | 6.8 | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | NaN | . 4 Slam | 1087521.0 | 1000000.0 | 3.4 | . Other Features . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Images w/Captions . You can include markdown images with captions like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Of course, the caption is optional. . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . More Examples . This tutorial contains more examples of what you can do with notebooks. . How fastpages Converts Notebooks to Blog Posts . fastpages uses nbdev to power the conversion process of Jupyter Notebooks to blog posts. When you save a notebook into the /_notebooks folder of your repository, GitHub Actions applies nbdev against those notebooks automatically. The same process occurs when you save Word documents or markdown files into the _word or _posts directory, respectively. . We will discuss how GitHub Actions work in a follow up blog post. . Resources &amp; Next Steps . We highly encourage you to start blogging with fastpages! Some resources that may be helpful: . fastpages repo - this is where you can go to create your own fastpages blog! | Fastai forums - nbdev &amp; blogging category. You can ask questions about fastpages here, as well as suggest new features. | nbdev: this project powers the conversion of Jupyter notebooks to blog posts. | . If you end up writing a blog post using fastpages, please let us know on Twitter: @jeremyphoward, @HamelHusain. .",
            "url": "https://bo-lu.github.io/geoca_developers_page/fastpages/jupyter/2020/01/29/intro.html",
            "relUrl": "/fastpages/jupyter/2020/01/29/intro.html",
            "date": " • Jan 29, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About",
          "content": ".",
          "url": "https://bo-lu.github.io/geoca_developers_page/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://bo-lu.github.io/geoca_developers_page/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}